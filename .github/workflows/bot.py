import gspread
from google.oauth2.service_account import Credentials
import requests
from bs4 import BeautifulSoup
import random
import schedule
import time
from datetime import datetime
import re
from telegram import Bot

# Google Sheets API рж╕рзЗржЯржЖржк
SCOPE = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]
CREDS_FILE = 'credentials.json'

# ржЧрзБржЧрж▓ рж╢рж┐ржЯ ржХржиржлрж┐ржЧ
SPREADSHEET_ID = 'YOUR_SHEET_ID'  # ржЖржкржирж╛рж░ рж╢рж┐ржЯ ржЖржЗржбрж┐ ржжрж┐ржпрж╝рзЗ ржкрзНрж░рждрж┐рж╕рзНржерж╛ржкржи ржХрж░рзБржи

# ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ рж╕рзЗржЯржЖржк
TELEGRAM_TOKEN = 'YOUR_BOT_TOKEN'  # ржЖржкржирж╛рж░ ржмржЯ ржЯрзЛржХрзЗржи ржжрж┐ржпрж╝рзЗ ржкрзНрж░рждрж┐рж╕рзНржерж╛ржкржи ржХрж░рзБржи
CHANNEL_NAME = '@YOUR_CHANNEL'    # ржЖржкржирж╛рж░ ржЪрзНржпрж╛ржирзЗрж▓ ржЗржЙржЬрж╛рж░ржирзЗржо ржжрж┐ржпрж╝рзЗ ржкрзНрж░рждрж┐рж╕рзНржерж╛ржкржи ржХрж░рзБржи

# ржмрж┐рж╢рзНржмрж╕рзНржд ржУржкрзЗржи рж╕рзЛрж░рзНрж╕ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ (ржмржпрж╝рж╕-ржЙржкржпрзБржХрзНржд ржХржирзНржЯрзЗржирзНржЯ)
TRUSTED_SOURCES = {
    "english": [
        "https://www.gutenberg.org/ebooks/search/?query=short+stories",
        "https://www.freechildrenstories.com/",
        "https://www.storynory.com/archives/fairy-tales/"
    ],
    "bengali": [
        "https://www.bangla-gobol.com/",
        "https://www.bangla-kobita.com/",
        "https://www.rokomari.com/book/category/1/"
    ],
    "hindi": [
        "https://hindikahaniyan.com/",
        "https://kavitakosh.org/",
        "https://www.hindisahityadarpan.in/"
    ]
}

# ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐ ржорзНржпрж╛ржкрж┐ржВ
CATEGORIES = {
    "english": ["Fairy Tale", "Adventure", "Science Fiction", "Mystery", "Poetry"],
    "bengali": ["ржкрж░рзАрж░ ржЧрж▓рзНржк", "ржЕрзНржпрж╛ржбржнрзЗржЮрзНржЪрж╛рж░", "ржмрж┐ржЬрзНржЮрж╛ржи ржХрж▓рзНржкржХрж╛рж╣рж┐ржирзА", "рж░рж╣рж╕рзНржп", "ржХржмрж┐рждрж╛"],
    "hindi": ["рдкрд░реА рдХрдерд╛", "рд░реЛрдорд╛рдВрдЪ", "рд╡рд┐рдЬреНрдЮрд╛рди рдХрдерд╛", "рд░рд╣рд╕реНрдп", "рдХрд╡рд┐рддрд╛"]
}

# ржЗржорзЛржЬрж┐ ржорзНржпрж╛ржкрж┐ржВ
EMOJI_MAP = {
    "Fairy Tale": "ЁЯзЪ", 
    "Adventure": "ЁЯПЮя╕П",
    "Science Fiction": "ЁЯЪА",
    "Mystery": "ЁЯФН",
    "Poetry": "ЁЯУЬ",
    "ржкрж░рзАрж░ ржЧрж▓рзНржк": "ЁЯзЪ",
    "ржЕрзНржпрж╛ржбржнрзЗржЮрзНржЪрж╛рж░": "ЁЯПЮя╕П",
    "ржмрж┐ржЬрзНржЮрж╛ржи ржХрж▓рзНржкржХрж╛рж╣рж┐ржирзА": "ЁЯЪА",
    "рж░рж╣рж╕рзНржп": "ЁЯФН",
    "ржХржмрж┐рждрж╛": "ЁЯУЬ",
    "рдкрд░реА рдХрдерд╛": "ЁЯзЪ",
    "рд░реЛрдорд╛рдВрдЪ": "ЁЯПЮя╕П",
    "рд╡рд┐рдЬреНрдЮрд╛рди рдХрдерд╛": "ЁЯЪА",
    "рд░рд╣рд╕реНрдп": "ЁЯФН",
    "рдХрд╡рд┐рддрд╛": "ЁЯУЬ"
}

# ржирж┐рж╖рж┐ржжрзНржз ржмрж┐рж╖ржпрж╝ржмрж╕рзНрждрзБрж░ рж╢ржмрзНржжрждрж╛рж▓рж┐ржХрж╛ (рж╕ржорж╕рзНржд ржнрж╛рж╖рж╛рж░ ржЬржирзНржп)
BLACKLIST_WORDS = [
    "adult", "explicit", "porn", "xxx", "sex", "nude",
    "ржЕрж╢рзНрж▓рзАрж▓", "ржпрзМржи", "ржкрж░рзНржг", "ржиржЧрзНржи", "ржорж╛ржжржХ",
    "рдЕрд╢реНрд▓реАрд▓", "рдпреМрди", "рдкреЛрд░реНрди", "рдирдЧреНрди", "рдорд╛рджрдХ"
]

def get_google_sheet(sheet_name):
    """ржЧрзБржЧрж▓ рж╢рж┐ржЯ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи"""
    creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPE)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID)
    return sheet.worksheet(sheet_name)

def is_adult_content(text):
    """ржмржпрж╝рж╕-ржЕржирзБржкржпрзБржХрзНржд ржХржирзНржЯрзЗржирзНржЯ ржЪрзЗржХ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи"""
    text_lower = text.lower()
    return any(word in text_lower for word in BLACKLIST_WORDS)

def fetch_stories(language):
    """ржЧрж▓рзНржк рж╕ржВржЧрзНрж░рж╣ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи"""
    worksheet = get_google_sheet(language.capitalize())
    sources = TRUSTED_SOURCES[language]
    category = random.choice(CATEGORIES[language])
    
    for source in sources:
        try:
            response = requests.get(source)
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # ржЧрж▓рзНржк ржирж┐рж░рзНржмрж╛ржЪржи (ржнрж┐ржирзНржи ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯрзЗрж░ ржЬржирзНржп ржнрж┐ржирзНржи рж▓ржЬрж┐ржХ)
            if "gutenberg.org" in source:
                stories = [p.get_text().strip() for p in soup.select('.chapter p')]
            elif "bangla-gobol.com" in source:
                stories = [div.get_text().strip() for div in soup.select('.story-content')]
            elif "hindikahaniyan.com" in source:
                stories = [article.get_text().strip() for article in soup.select('.entry-content')]
            else:
                stories = [p.get_text().strip() for p in soup.find_all('p')]
            
            # ржЧрж▓рзНржк ржлрж┐рж▓рзНржЯрж╛рж░рж┐ржВ
            valid_stories = []
            for story in stories:
                words = story.split()
                word_count = len(words)
                if (100 <= word_count <= 500 and 
                    not is_adult_content(story) and 
                    not any(url in story for url in ["http://", "https://"])):
                    valid_stories.append(story)
            
            if valid_stories:
                selected_story = random.choice(valid_stories)
                title = f"{category} ржЧрж▓рзНржк {random.randint(1, 100)}"[:50]
                
                # ржбрзБржкрзНрж▓рж┐ржХрзЗржЯ ржЪрзЗржХ
                existing_titles = worksheet.col_values(1)
                if title not in existing_titles:
                    emoji = EMOJI_MAP.get(category, "ЁЯУЦ")
                    worksheet.append_row([
                        title,
                        selected_story,
                        category,
                        source,
                        "тЬЧ",
                        "",
                        emoji
                    ])
                    print(f"Added new {language} story: {title}")
                    return True
        except Exception as e:
            print(f"Error fetching from {source}: {str(e)}")
    return False

def post_to_telegram():
    """ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржорзЗ ржЧрж▓рзНржк ржкрзЛрж╕рзНржЯ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи"""
    bot = Bot(token=TELEGRAM_TOKEN)
    
    for language in ["English", "Bengali", "Hindi"]:
        try:
            worksheet = get_google_sheet(language)
            records = worksheet.get_all_records()
            
            for record in records:
                if record['Posted'] == "тЬЧ":
                    title = record['Title']
                    content = record['Content']
                    category = record['Category']
                    emoji = record['Emoji']
                    
                    message = (
                        f"{emoji} *{title}* {emoji}\n\n"
                        f"{content}\n\n"
                        f"{emoji} #{category.replace(' ', '_')}"
                    )
                    
                    # 4096 ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░рзЗрж░ ржмрзЗрж╢рж┐ рж╣рж▓рзЗ ржнрж╛ржЧ ржХрж░рзЗ ржкрзЛрж╕рзНржЯ ржХрж░рзБржи
                    if len(message) > 4096:
                        part1 = message[:4000]
                        last_newline = part1.rfind('\n')
                        if last_newline != -1:
                            part1 = message[:last_newline]
                        
                        bot.send_message(chat_id=CHANNEL_NAME, text=part1, parse_mode="Markdown")
                        bot.send_message(chat_id=CHANNEL_NAME, text=message[last_newline:], parse_mode="Markdown")
                    else:
                        bot.send_message(chat_id=CHANNEL_NAME, text=message, parse_mode="Markdown")
                    
                    # ржкрзЛрж╕рзНржЯ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржЖржкржбрзЗржЯ ржХрж░рзБржи
                    cell = worksheet.find(title, in_column=1)
                    worksheet.update_cell(cell.row, 5, "тЬУ")
                    worksheet.update_cell(cell.row, 6, datetime.now().strftime("%Y-%m-%d %H:%M"))
                    print(f"Posted {language} story: {title}")
                    break
        except Exception as e:
            print(f"Error posting {language} story: {str(e)}")

def main():
    """ржорзЗржЗржи ржлрж╛ржВрж╢ржи"""
    # ржкрзНрж░рждрж┐ржжрж┐ржи рж╕ржХрж╛рж▓ рзмржЯрж╛ ржерзЗржХрзЗ рж░рж╛ржд рззрзжржЯрж╛ ржкрж░рзНржпржирзНржд рзнржЯрж┐ ржкрзЛрж╕рзНржЯрзЗрж░ рж╕ржоржпрж╝рж╕рзВржЪрзА
    post_times = ["06:00", "08:00", "10:00", "12:00", "14:00", "16:00", "18:00", "20:00", "22:00"]
    
    for time_str in post_times:
        schedule.every().day.at(time_str).do(post_to_telegram)
    
    # ржкрзНрж░рждрж┐ рзк ржШржгрзНржЯрж╛ржпрж╝ ржирждрзБржи ржЧрж▓рзНржк рж╕ржВржЧрзНрж░рж╣
    schedule.every(4).hours.do(lambda: fetch_stories("english"))
    schedule.every(4).hours.do(lambda: fetch_stories("bengali"))
    schedule.every(4).hours.do(lambda: fetch_stories("hindi"))
    
    print("Bot started successfully!")
    while True:
        schedule.run_pending()
        time.sleep(60)

if __name__ == "__main__":
    main()
